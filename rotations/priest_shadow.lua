--[[
@module Priest Shadow Rotation
GENERATED FROM SIMCRAFT PROFILE 'priest_shadow.simc'
]]
local spells = kps.spells.priest
local env = kps.env.priest

kps.rotations.register("PRIEST","SHADOW",
{
	{spells.devouringPlague, 'player.shadowOrbs == 5'}, -- devouring_plague,if=shadow_orb=5
	{spells.shadowform, 'not player.hasBuff(spells.shadowform)'},
	{spells.mindBlast, 'true'},
	{spells.mindSpike, 'not target.hasMyDebuff(spells.shadowWordPain) and not target.hasMyDebuff(spells.vampiricTouch) and player.shadowOrbs < 4'},
	{spells.shadowWordPain, 'not target.hasMyDebuff(spells.shadowWordPain)'}, -- shadow_word_pain,if=primary_target=0&!ticking,cycle_targets=1,max_cycle_targets=5
    {spells.vampiricTouch, 'not target.hasMyDebuff(spells.vampiricTouch)'}, -- vampiric_touch,if=primary_target=0&!ticking,cycle_targets=1,max_cycle_targets=5  
    {spells.mindFlay},

}
,"priest_shadow.test")


kps.rotations.register("PRIEST","SHADOW",
{
    {spells.shadowform, 'not player.hasBuff(spells.shadowform)'}, -- shadowform,if=!buff.shadowform.up
    {spells.powerInfusion, 'player.hasTalent(5, 2)'}, -- power_infusion,if=talent.power_infusion.enabled
-- ERROR in 'call_action_list,name=pvp_dispersion,if=set_bonus.pvp_2pc': Unknown expression 'set_bonus.pvp_2pc'!
    {{"nested"}, 'True', { -- call_action_list,name=decision
        {{"nested"}, 'not player.hasTalent(7, 1) and not player.hasTalent(7, 2)', { -- call_action_list,name=main,if=!talent.clarity_of_power.enabled&!talent.void_entropy.enabled
            {spells.mindbender, 'player.hasTalent(3, 2)'}, -- mindbender,if=talent.mindbender.enabled
            {spells.shadowfiend, 'not player.hasTalent(3, 2)'}, -- shadowfiend,if=!talent.mindbender.enabled
            {spells.shadowWordDeath, 'player.shadowOrbs <= 4'}, -- shadow_word_death,if=natural_shadow_word_death_range&shadow_orb<=4,cycle_targets=1
-- SKIP 'mind_blast,if=glyph.mind_harvest.enabled&shadow_orb<=2&active_enemies<=5&cooldown_react': Line Skipped
            {spells.devouringPlague, 'player.shadowOrbs == 5 and not target.hasMyDebuff(spells.devouringPlague) and ( player.hasTalent(3, 1) )'}, -- devouring_plague,if=shadow_orb=5&!target.dot.devouring_plague_dot.ticking&(talent.surge_of_darkness.enabled|set_bonus.tier17_4pc),cycle_targets=1
            {spells.devouringPlague, 'player.shadowOrbs == 5'}, -- devouring_plague,if=shadow_orb=5
-- SKIP 'devouring_plague,if=shadow_orb>=3&talent.auspicious_spirits.enabled&shadowy_apparitions_in_flight>=3': Line Skipped
-- SKIP 'devouring_plague,if=shadow_orb>=4&talent.auspicious_spirits.enabled&shadowy_apparitions_in_flight>=2': Line Skipped
            {spells.devouringPlague, 'player.shadowOrbs >= 3 and player.buffDuration(spells.mentalInstinct) < player.gcd and player.buffDuration(spells.mentalInstinct) > ( player.gcd * 0.7 ) and player.buffDuration(spells.mentalInstinct)'}, -- devouring_plague,if=shadow_orb>=3&buff.mental_instinct.remains<gcd&buff.mental_instinct.remains>(gcd*0.7)&buff.mental_instinct.remains
            {spells.devouringPlague, 'player.shadowOrbs >= 4 and player.hasTalent(7, 3) and ( ( spells.mindBlast.cooldown < player.gcd and not ) or ( spells.shadowWordDeath.cooldown < player.gcd ) ) and not target.hasMyDebuff(spells.devouringPlague) and player.hasTalent(3, 1)'}, -- devouring_plague,if=shadow_orb>=4&talent.auspicious_spirits.enabled&((cooldown.mind_blast.remains<gcd&!set_bonus.tier17_2pc)|(natural_shadow_word_death_range&cooldown.shadow_word_death.remains<gcd))&!target.dot.devouring_plague_tick.ticking&talent.surge_of_darkness.enabled,cycle_targets=1
            {spells.devouringPlague, 'player.shadowOrbs >= 4 and player.hasTalent(7, 3) and ( ( spells.mindBlast.cooldown < player.gcd and not ) or ( target.hp < 20 and spells.shadowWordDeath.cooldown < player.gcd ) )'}, -- devouring_plague,if=shadow_orb>=4&talent.auspicious_spirits.enabled&((cooldown.mind_blast.remains<gcd&!set_bonus.tier17_2pc)|(target.health.pct<20&cooldown.shadow_word_death.remains<gcd))
            {spells.devouringPlague, 'player.shadowOrbs >= 3 and not player.hasTalent(7, 3) and ( ( spells.mindBlast.cooldown < player.gcd and not ) or ( spells.shadowWordDeath.cooldown < player.gcd ) ) and not target.hasMyDebuff(spells.devouringPlague) and player.hasTalent(3, 1)'}, -- devouring_plague,if=shadow_orb>=3&!talent.auspicious_spirits.enabled&((cooldown.mind_blast.remains<gcd&!set_bonus.tier17_2pc)|(natural_shadow_word_death_range&cooldown.shadow_word_death.remains<gcd))&!target.dot.devouring_plague_tick.ticking&talent.surge_of_darkness.enabled,cycle_targets=1
            {spells.devouringPlague, 'player.shadowOrbs >= 3 and not player.hasTalent(7, 3) and ( ( spells.mindBlast.cooldown < player.gcd and not ) or ( target.hp < 20 and spells.shadowWordDeath.cooldown < player.gcd ) )'}, -- devouring_plague,if=shadow_orb>=3&!talent.auspicious_spirits.enabled&((cooldown.mind_blast.remains<gcd&!set_bonus.tier17_2pc)|(target.health.pct<20&cooldown.shadow_word_death.remains<gcd))
-- SKIP 'mind_blast,if=glyph.mind_harvest.enabled&mind_harvest=0,cycle_targets=1': Line Skipped
            {spells.mindBlast, 'player.hasTalent(7, 3) and activeEnemies() <= 4 and player.hasProc'}, -- mind_blast,if=talent.auspicious_spirits.enabled&active_enemies<=4&cooldown_react
            {spells.shadowWordPain, 'player.hasTalent(7, 3) and target.myDebuffDuration(spells.shadowWordPain) < ( 18*0 . 3 ) and target.timeToDie > ( 18*0 . 75 )'}, -- shadow_word_pain,if=talent.auspicious_spirits.enabled&remains<(18*0.3)&target.time_to_die>(18*0.75)&miss_react,cycle_targets=1,max_cycle_targets=7
            {spells.mindBlast, 'player.hasProc'}, -- mind_blast,if=cooldown_react
            {spells.searingInsanity, 'player.buffDuration(spells.insanity) < 0.5 * player.gcd and activeEnemies() >= 3 and spells.mindBlast.cooldown > 0.5 * player.gcd'}, -- searing_insanity,if=buff.insanity.remains<0.5*gcd&active_enemies>=3&cooldown.mind_blast.remains>0.5*gcd,chain=1,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1)
            {spells.searingInsanity, 'activeEnemies() >= 3 and spells.mindBlast.cooldown > 0.5 * player.gcd'}, -- searing_insanity,if=active_enemies>=3&cooldown.mind_blast.remains>0.5*gcd,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1)
            {spells.insanity, 'player.buffDuration(spells.insanity) < 0.5 * player.gcd and activeEnemies() <= 2'}, -- insanity,if=buff.insanity.remains<0.5*gcd&active_enemies<=2,chain=1,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1|shadow_orb=5)
            {spells.insanity, 'activeEnemies() <= 2'}, -- insanity,chain=1,if=active_enemies<=2,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1|shadow_orb=5)
            {spells.halo, 'player.hasTalent(6, 3) and target.distance <= 30 and activeEnemies() > 2'}, -- halo,if=talent.halo.enabled&target.distance<=30&active_enemies>2
            {spells.cascade, 'player.hasTalent(6, 1) and activeEnemies() > 2 and target.distance <= 40'}, -- cascade,if=talent.cascade.enabled&active_enemies>2&target.distance<=40
            {spells.divineStar, 'player.hasTalent(6, 2) and activeEnemies() > 4 and target.distance <= 24'}, -- divine_star,if=talent.divine_star.enabled&active_enemies>4&target.distance<=24
            {spells.shadowWordPain, 'not player.hasTalent(7, 3) and target.myDebuffDuration(spells.shadowWordPain) < ( 18*0 . 3 ) and target.timeToDie > ( 18*0 . 75 ) and activeEnemies() <= 5'}, -- shadow_word_pain,if=!talent.auspicious_spirits.enabled&remains<(18*0.3)&target.time_to_die>(18*0.75)&miss_react&active_enemies<=5,cycle_targets=1,max_cycle_targets=5
            {spells.vampiricTouch, 'target.myDebuffDuration(spells.vampiricTouch) < ( 15*0 . 3 + spells.vampiricTouch.castTime ) and target.timeToDie > ( 15*0 . 75 + spells.vampiricTouch.castTime ) and activeEnemies() <= 5'}, -- vampiric_touch,if=remains<(15*0.3+cast_time)&target.time_to_die>(15*0.75+cast_time)&miss_react&active_enemies<=5,cycle_targets=1,max_cycle_targets=5
            {spells.devouringPlague, 'not player.hasTalent(7, 2) and player.shadowOrbs >= 3 and (target.myDebuffDuration(spells.devouringPlague)/spells.devouringPlague.tickTime) <= 1'}, -- devouring_plague,if=!talent.void_entropy.enabled&shadow_orb>=3&ticks_remain<=1
            {spells.mindSpike, 'activeEnemies() <= 5 and player.buffStacks(spells.surgeOfDarkness) == 3'}, -- mind_spike,if=active_enemies<=5&buff.surge_of_darkness.react=3
            {spells.halo, 'player.hasTalent(6, 3) and target.distance <= 30 and target.distance >= 17'}, -- halo,if=talent.halo.enabled&target.distance<=30&target.distance>=17
            {spells.cascade, 'player.hasTalent(6, 1) and ( activeEnemies() > 1 or target.distance >= 28 ) and target.distance <= 40 and target.distance >= 11'}, -- cascade,if=talent.cascade.enabled&(active_enemies>1|target.distance>=28)&target.distance<=40&target.distance>=11
            {spells.divineStar, 'player.hasTalent(6, 2) and ( activeEnemies() > 1 and target.distance <= 24 )'}, -- divine_star,if=talent.divine_star.enabled&(active_enemies>1&target.distance<=24)
            {spells.mindSpike, 'player.buffStacks(spells.surgeOfDarkness) and activeEnemies() <= 5'}, -- mind_spike,if=buff.surge_of_darkness.react&active_enemies<=5
            {spells.divineStar, 'player.hasTalent(6, 2) and target.distance <= 28 and activeEnemies() > 1'}, -- divine_star,if=talent.divine_star.enabled&target.distance<=28&active_enemies>1
            {spells.mindSear, 'activeEnemies() >= 4'}, -- mind_sear,chain=1,if=active_enemies>=4,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1|shadow_orb=5)
            {spells.shadowWordPain, 'player.shadowOrbs >= 2 and (target.myDebuffDuration(spells.shadowWordPain)/spells.shadowWordPain.tickTime) <= 3 and target.timeToDie > ( 18*0 . 75 ) and player.hasTalent(3, 3)'}, -- shadow_word_pain,if=shadow_orb>=2&ticks_remain<=3&target.time_to_die>(18*0.75)&talent.insanity.enabled
            {spells.vampiricTouch, 'player.shadowOrbs >= 2 and (target.myDebuffDuration(spells.vampiricTouch)/spells.vampiricTouch.tickTime) <= 3.5 and target.timeToDie > ( 15*0 . 75 + spells.vampiricTouch.castTime ) and player.hasTalent(3, 3)'}, -- vampiric_touch,if=shadow_orb>=2&ticks_remain<=3.5&target.time_to_die>(15*0.75+cast_time)&talent.insanity.enabled
            {spells.mindFlay}, -- mind_flay,chain=1,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1|shadow_orb=5)
            {spells.shadowWordDeath, 'player.isMoving == 1 * player.gcd'}, -- shadow_word_death,moving=1,if=movement.remains>=1*gcd
            {spells.powerWordShield, 'player.hasTalent(2, 1) and target.distance >= 25'}, -- power_word_shield,moving=1,if=talent.body_and_soul.enabled&movement.distance>=25
            {spells.halo, 'player.hasTalent(6, 3) and target.distance <= 30 , player.isMoving'}, -- halo,if=talent.halo.enabled&target.distance<=30,moving=1
            {spells.divineStar, 'player.hasTalent(6, 2) and target.distance <= 28'}, -- divine_star,moving=1,if=talent.divine_star.enabled&target.distance<=28
            {spells.cascade, 'player.hasTalent(6, 1) and target.distance <= 40'}, -- cascade,moving=1,if=talent.cascade.enabled&target.distance<=40
            {spells.shadowWordPain}, -- shadow_word_pain,moving=1,cycle_targets=1
        }},
        {{"nested"}, 'player.hasTalent(7, 2) and not player.hasTalent(7, 1) and not player.hasTalent(7, 3)', { -- call_action_list,name=vent,if=talent.void_entropy.enabled&!talent.clarity_of_power.enabled&!talent.auspicious_spirits.enabled
            {spells.voidEntropy, 'player.shadowOrbs == 3 and not target.hasMyDebuff(spells.voidEntropy) and target.timeToDie > 60 and activeEnemies() == 1'}, -- void_entropy,if=shadow_orb=3&!ticking&target.time_to_die>60&active_enemies=1
            {spells.voidEntropy, 'not target.hasMyDebuff(spells.voidEntropy) and player.shadowOrbs == 5 and activeEnemies() >= 1 and target.timeToDie > 60'}, -- void_entropy,if=!dot.void_entropy.ticking&shadow_orb=5&active_enemies>=1&target.time_to_die>60,cycle_targets=1,max_cycle_targets=6
            {spells.devouringPlague, 'player.shadowOrbs == 5 and target.hasMyDebuff(spells.voidEntropy) and target.myDebuffDuration(spells.voidEntropy) <= player.gcd * 2 and player.hasProc and activeEnemies() == 1'}, -- devouring_plague,if=shadow_orb=5&dot.void_entropy.ticking&dot.void_entropy.remains<=gcd*2&cooldown_react&active_enemies=1
            {spells.devouringPlague, 'target.hasMyDebuff(spells.voidEntropy) and target.myDebuffDuration(spells.voidEntropy) <= player.gcd * 2 and player.hasProc and activeEnemies() > 1'}, -- devouring_plague,if=dot.void_entropy.ticking&dot.void_entropy.remains<=gcd*2&cooldown_react&active_enemies>1,cycle_targets=1
            {spells.devouringPlague, 'player.shadowOrbs == 5 and target.myDebuffDuration(spells.voidEntropy) < 5 and activeEnemies() > 1'}, -- devouring_plague,if=shadow_orb=5&dot.void_entropy.remains<5&active_enemies>1,cycle_targets=1
            {spells.devouringPlague, 'player.shadowOrbs == 5 and target.myDebuffDuration(spells.voidEntropy) < 10 and activeEnemies() > 2'}, -- devouring_plague,if=shadow_orb=5&dot.void_entropy.remains<10&active_enemies>2,cycle_targets=1
            {spells.devouringPlague, 'player.shadowOrbs == 5 and target.myDebuffDuration(spells.voidEntropy) < 15 and activeEnemies() > 3'}, -- devouring_plague,if=shadow_orb=5&dot.void_entropy.remains<15&active_enemies>3,cycle_targets=1
            {spells.devouringPlague, 'player.shadowOrbs == 5 and target.myDebuffDuration(spells.voidEntropy) < 20 and activeEnemies() > 4'}, -- devouring_plague,if=shadow_orb=5&dot.void_entropy.remains<20&active_enemies>4,cycle_targets=1
            {spells.devouringPlague, 'player.shadowOrbs == 5 and target.myDebuffDuration(spells.voidEntropy) and ( spells.mindBlast.cooldown <= player.gcd * 2 or ( spells.shadowWordDeath.cooldown <= player.gcd * 2 ) ) and activeEnemies() == 1'}, -- devouring_plague,if=shadow_orb=5&dot.void_entropy.remains&(cooldown.mind_blast.remains<=gcd*2|(natural_shadow_word_death_range&cooldown.shadow_word_death.remains<=gcd*2))&active_enemies=1
            {spells.devouringPlague, 'player.shadowOrbs == 5 and target.myDebuffDuration(spells.voidEntropy) and ( spells.mindBlast.cooldown <= player.gcd * 2 or ( spells.shadowWordDeath.cooldown <= player.gcd * 2 ) ) and activeEnemies() > 1'}, -- devouring_plague,if=shadow_orb=5&dot.void_entropy.remains&(cooldown.mind_blast.remains<=gcd*2|(natural_shadow_word_death_range&cooldown.shadow_word_death.remains<=gcd*2))&active_enemies>1,cycle_targets=1
            {spells.devouringPlague, 'player.shadowOrbs >= 3 and target.hasMyDebuff(spells.voidEntropy) and activeEnemies() == 1 and player.buffDuration(spells.mentalInstinct) < ( player.gcd * 1.4 ) and player.buffDuration(spells.mentalInstinct) > ( player.gcd * 0.7 ) and player.buffDuration(spells.mentalInstinct)'}, -- devouring_plague,if=shadow_orb>=3&dot.void_entropy.ticking&active_enemies=1&buff.mental_instinct.remains<(gcd*1.4)&buff.mental_instinct.remains>(gcd*0.7)&buff.mental_instinct.remains
            {spells.mindbender, 'player.hasTalent(3, 2) and spells.mindBlast.cooldown >= player.gcd'}, -- mindbender,if=talent.mindbender.enabled&cooldown.mind_blast.remains>=gcd
            {spells.shadowfiend, 'not player.hasTalent(3, 2) and spells.mindBlast.cooldown >= player.gcd'}, -- shadowfiend,if=!talent.mindbender.enabled&cooldown.mind_blast.remains>=gcd
            {spells.halo, 'player.hasTalent(6, 3) and target.distance <= 30 and activeEnemies() >= 4'}, -- halo,if=talent.halo.enabled&target.distance<=30&active_enemies>=4
-- SKIP 'mind_blast,if=glyph.mind_harvest.enabled&mind_harvest=0&shadow_orb<=2,cycle_targets=1': Line Skipped
-- SKIP 'devouring_plague,if=glyph.mind_harvest.enabled&mind_harvest=0&shadow_orb>=3,cycle_targets=1': Line Skipped
            {spells.mindBlast, 'activeEnemies() <= 10 and player.hasProc and player.shadowOrbs <= 4'}, -- mind_blast,if=active_enemies<=10&cooldown_react&shadow_orb<=4
            {spells.shadowWordDeath, 'player.hasProc and player.shadowOrbs <= 4'}, -- shadow_word_death,if=natural_shadow_word_death_range&cooldown_react&shadow_orb<=4,cycle_targets=1
            {spells.searingInsanity, 'player.buffDuration(spells.insanity) < 0.5 * player.gcd and activeEnemies() >= 3 and spells.mindBlast.cooldown > 0.5 * player.gcd'}, -- searing_insanity,if=buff.insanity.remains<0.5*gcd&active_enemies>=3&cooldown.mind_blast.remains>0.5*gcd,chain=1,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1)
            {spells.searingInsanity, 'activeEnemies() >= 3 and spells.mindBlast.cooldown > 0.5 * player.gcd'}, -- searing_insanity,if=active_enemies>=3&cooldown.mind_blast.remains>0.5*gcd,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1)
            {spells.shadowWordPain, 'player.shadowOrbs == 4 and target.myDebuffDuration(spells.shadowWordPain) < ( 18*0 . 50 ) and spells.mindBlast.cooldown < 1.2 * player.gcd and spells.mindBlast.cooldown > 0.2 * player.gcd'}, -- shadow_word_pain,if=shadow_orb=4&remains<(18*0.50)&set_bonus.tier17_2pc&cooldown.mind_blast.remains<1.2*gcd&cooldown.mind_blast.remains>0.2*gcd
            {spells.insanity, 'player.buffDuration(spells.insanity) < 0.5 * player.gcd and activeEnemies() <= 3 and spells.mindBlast.cooldown > 0.5 * player.gcd'}, -- insanity,if=buff.insanity.remains<0.5*gcd&active_enemies<=3&cooldown.mind_blast.remains>0.5*gcd,chain=1,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1)
            {spells.insanity, 'activeEnemies() <= 3 and spells.mindBlast.cooldown > 0.5 * player.gcd'}, -- insanity,chain=1,if=active_enemies<=3&cooldown.mind_blast.remains>0.5*gcd,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1)
            {spells.mindSpike, 'activeEnemies() <= 5 and player.buffStacks(spells.surgeOfDarkness) == 3'}, -- mind_spike,if=active_enemies<=5&buff.surge_of_darkness.react=3
            {spells.shadowWordPain, 'target.myDebuffDuration(spells.shadowWordPain) < ( 18*0 . 3 ) and target.timeToDie > ( 18*0 . 75 )'}, -- shadow_word_pain,if=remains<(18*0.3)&target.time_to_die>(18*0.75)&miss_react,cycle_targets=1,max_cycle_targets=5
            {spells.vampiricTouch, 'target.myDebuffDuration(spells.vampiricTouch) < ( 15*0 . 3 + spells.vampiricTouch.castTime ) and target.timeToDie > ( 15*0 . 75 + spells.vampiricTouch.castTime )'}, -- vampiric_touch,if=remains<(15*0.3+cast_time)&target.time_to_die>(15*0.75+cast_time)&miss_react,cycle_targets=1,max_cycle_targets=5
            {spells.halo, 'player.hasTalent(6, 3) and target.distance <= 30 and spells.mindBlast.cooldown > 0.5 * player.gcd'}, -- halo,if=talent.halo.enabled&target.distance<=30&cooldown.mind_blast.remains>0.5*gcd
            {spells.cascade, 'player.hasTalent(6, 1) and target.distance <= 40 and spells.mindBlast.cooldown > 0.5 * player.gcd'}, -- cascade,if=talent.cascade.enabled&target.distance<=40&cooldown.mind_blast.remains>0.5*gcd
            {spells.divineStar, 'player.hasTalent(6, 2) and activeEnemies() > 4 and target.distance <= 24 and spells.mindBlast.cooldown > 0.5 * player.gcd'}, -- divine_star,if=talent.divine_star.enabled&active_enemies>4&target.distance<=24&cooldown.mind_blast.remains>0.5*gcd
            {spells.mindSpike, 'activeEnemies() <= 5 and player.buffStacks(spells.surgeOfDarkness) and spells.mindBlast.cooldown > 0.5 * player.gcd'}, -- mind_spike,if=active_enemies<=5&buff.surge_of_darkness.react&cooldown.mind_blast.remains>0.5*gcd
            {spells.mindSear, 'activeEnemies() >= 3 and spells.mindBlast.cooldown > 0.5 * player.gcd'}, -- mind_sear,chain=1,if=active_enemies>=3&cooldown.mind_blast.remains>0.5*gcd,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1)
            {spells.mindFlay, 'spells.mindBlast.cooldown > 0.5 * player.gcd'}, -- mind_flay,if=cooldown.mind_blast.remains>0.5*gcd,interrupt=1,chain=1
            {spells.shadowWordDeath, 'player.isMoving == 1 * player.gcd'}, -- shadow_word_death,moving=1,if=movement.remains>=1*gcd
            {spells.powerWordShield, 'player.hasTalent(2, 1) and target.distance >= 25'}, -- power_word_shield,moving=1,if=talent.body_and_soul.enabled&movement.distance>=25
            {spells.halo, 'player.hasTalent(6, 3) and target.distance <= 30 , player.isMoving'}, -- halo,if=talent.halo.enabled&target.distance<=30,moving=1
            {spells.divineStar, 'player.hasTalent(6, 2) and target.distance <= 28'}, -- divine_star,moving=1,if=talent.divine_star.enabled&target.distance<=28
            {spells.cascade, 'player.hasTalent(6, 1) and target.distance <= 40'}, -- cascade,moving=1,if=talent.cascade.enabled&target.distance<=40
            {spells.shadowWordPain}, -- shadow_word_pain,moving=1,cycle_targets=1
        }},
        {{"nested"}, 'player.hasTalent(7, 1) and not player.hasTalent(3, 3)', { -- call_action_list,name=cop,if=talent.clarity_of_power.enabled&!talent.insanity.enabled
            {spells.devouringPlague, 'player.shadowOrbs == 5 and not target.hasMyDebuff(spells.devouringPlague) and target.timeToDie >= ( player.gcd * 4*7 % 6 )'}, -- devouring_plague,if=shadow_orb=5&primary_target=0&!target.dot.devouring_plague_dot.ticking&target.time_to_die>=(gcd*4*7%6),cycle_targets=1
            {spells.devouringPlague, 'player.shadowOrbs == 5 and target.timeToDie >= ( player.gcd * 4*7 % 6 ) and ( spells.mindBlast.cooldown <= player.gcd or ( spells.shadowWordDeath.cooldown <= player.gcd and target.hp < 20 ) )'}, -- devouring_plague,if=shadow_orb=5&primary_target=0&target.time_to_die>=(gcd*4*7%6)&(cooldown.mind_blast.remains<=gcd|(cooldown.shadow_word_death.remains<=gcd&target.health.pct<20)),cycle_targets=1
            {spells.devouringPlague, 'player.shadowOrbs == 5 and not and ( spells.mindBlast.cooldown <= player.gcd or ( spells.shadowWordDeath.cooldown <= player.gcd and target.hp < 20 ) )'}, -- devouring_plague,if=shadow_orb=5&!set_bonus.tier17_2pc&(cooldown.mind_blast.remains<=gcd|(cooldown.shadow_word_death.remains<=gcd&target.health.pct<20))
            {spells.devouringPlague, 'player.shadowOrbs == 5 and ( spells.mindBlast.cooldown <= player.gcd * 2 or ( spells.shadowWordDeath.cooldown <= player.gcd and target.hp < 20 ) )'}, -- devouring_plague,if=shadow_orb=5&set_bonus.tier17_2pc&(cooldown.mind_blast.remains<=gcd*2|(cooldown.shadow_word_death.remains<=gcd&target.health.pct<20))
            {spells.devouringPlague, 'player.buffDuration(spells.mentalInstinct) < player.gcd and player.buffDuration(spells.mentalInstinct) > ( player.gcd * 0.7 ) and player.buffDuration(spells.mentalInstinct) and activeEnemies() > 1'}, -- devouring_plague,if=primary_target=0&buff.mental_instinct.remains<gcd&buff.mental_instinct.remains>(gcd*0.7)&buff.mental_instinct.remains&active_enemies>1,cycle_targets=1
            {spells.devouringPlague, 'player.buffDuration(spells.mentalInstinct) < player.gcd and player.buffDuration(spells.mentalInstinct) > ( player.gcd * 0.7 ) and player.buffDuration(spells.mentalInstinct) and activeEnemies() > 1'}, -- devouring_plague,if=buff.mental_instinct.remains<gcd&buff.mental_instinct.remains>(gcd*0.7)&buff.mental_instinct.remains&active_enemies>1
            {spells.devouringPlague, 'player.shadowOrbs >= 3 and not and not and ( spells.mindBlast.cooldown <= player.gcd or ( spells.shadowWordDeath.cooldown <= player.gcd and target.hp < 20 ) ) and target.timeToDie >= ( player.gcd * 4*7 % 6 )'}, -- devouring_plague,if=shadow_orb>=3&!set_bonus.tier17_2pc&!set_bonus.tier17_4pc&(cooldown.mind_blast.remains<=gcd|(cooldown.shadow_word_death.remains<=gcd&target.health.pct<20))&primary_target=0&target.time_to_die>=(gcd*4*7%6),cycle_targets=1
            {spells.devouringPlague, 'player.shadowOrbs >= 3 and not and not and ( spells.mindBlast.cooldown <= player.gcd or ( spells.shadowWordDeath.cooldown <= player.gcd and target.hp < 20 ) )'}, -- devouring_plague,if=shadow_orb>=3&!set_bonus.tier17_2pc&!set_bonus.tier17_4pc&(cooldown.mind_blast.remains<=gcd|(cooldown.shadow_word_death.remains<=gcd&target.health.pct<20))
            {spells.devouringPlague, 'player.shadowOrbs >= 3 and not and ( spells.mindBlast.cooldown <= player.gcd * 2 or ( spells.shadowWordDeath.cooldown <= player.gcd and target.hp < 20 ) ) and target.timeToDie >= ( player.gcd * 4*7 % 6 ) and activeEnemies() > 1'}, -- devouring_plague,if=shadow_orb>=3&set_bonus.tier17_2pc&!set_bonus.tier17_4pc&(cooldown.mind_blast.remains<=gcd*2|(cooldown.shadow_word_death.remains<=gcd&target.health.pct<20))&primary_target=0&target.time_to_die>=(gcd*4*7%6)&active_enemies>1,cycle_targets=1
            {spells.devouringPlague, 'player.shadowOrbs >= 3 and not and ( spells.mindBlast.cooldown <= player.gcd * 2 or ( spells.shadowWordDeath.cooldown <= player.gcd and target.hp < 20 ) ) and activeEnemies() > 1'}, -- devouring_plague,if=shadow_orb>=3&set_bonus.tier17_2pc&!set_bonus.tier17_4pc&(cooldown.mind_blast.remains<=gcd*2|(cooldown.shadow_word_death.remains<=gcd&target.health.pct<20))&active_enemies>1
            {spells.devouringPlague, 'player.shadowOrbs >= 3 and player.hasTalent(3, 2) and not target.hasMyDebuff(spells.devouringPlague) and ( spells.mindBlast.cooldown <= player.gcd * 2 or ( spells.shadowWordDeath.cooldown <= player.gcd and target.hp < 20 ) ) and target.timeToDie >= ( player.gcd * 4*7 % 6 ) and activeEnemies() == 1'}, -- devouring_plague,if=shadow_orb>=3&set_bonus.tier17_2pc&talent.mindbender.enabled&!target.dot.devouring_plague_dot.ticking&(cooldown.mind_blast.remains<=gcd*2|(cooldown.shadow_word_death.remains<=gcd&target.health.pct<20))&primary_target=0&target.time_to_die>=(gcd*4*7%6)&active_enemies=1,cycle_targets=1
            {spells.devouringPlague, 'player.shadowOrbs >= 3 and player.hasTalent(3, 2) and not target.hasMyDebuff(spells.devouringPlague) and ( spells.mindBlast.cooldown <= player.gcd * 2 or ( spells.shadowWordDeath.cooldown <= player.gcd and target.hp < 20 ) ) and activeEnemies() == 1'}, -- devouring_plague,if=shadow_orb>=3&set_bonus.tier17_2pc&talent.mindbender.enabled&!target.dot.devouring_plague_dot.ticking&(cooldown.mind_blast.remains<=gcd*2|(cooldown.shadow_word_death.remains<=gcd&target.health.pct<20))&active_enemies=1
            {spells.devouringPlague, 'player.shadowOrbs >= 3 and player.hasTalent(3, 1) and player.buffDuration(spells.mentalInstinct) < ( player.gcd * 1.4 ) and player.buffDuration(spells.mentalInstinct) > ( player.gcd * 0.7 ) and player.buffDuration(spells.mentalInstinct) and ( spells.mindBlast.cooldown <= player.gcd * 2 or ( spells.shadowWordDeath.cooldown <= player.gcd and target.hp < 20 ) ) and target.timeToDie >= ( player.gcd * 4*7 % 6 ) and activeEnemies() == 1'}, -- devouring_plague,if=shadow_orb>=3&set_bonus.tier17_2pc&talent.surge_of_darkness.enabled&buff.mental_instinct.remains<(gcd*1.4)&buff.mental_instinct.remains>(gcd*0.7)&buff.mental_instinct.remains&(cooldown.mind_blast.remains<=gcd*2|(cooldown.shadow_word_death.remains<=gcd&target.health.pct<20))&primary_target=0&target.time_to_die>=(gcd*4*7%6)&active_enemies=1,cycle_targets=1
-- SKIP 'mind_blast,if=mind_harvest=0,cycle_targets=1': Line Skipped
            {spells.mindBlast, 'player.hasProc'}, -- mind_blast,if=cooldown_react
            {spells.shadowWordDeath, 'not target.hasMyDebuff(spells.shadowWordPain) and not target.hasMyDebuff(spells.vampiricTouch)'}, -- shadow_word_death,if=natural_shadow_word_death_range&!target.dot.shadow_word_pain.ticking&!target.dot.vampiric_touch.ticking,cycle_targets=1
-- SKIP 'shadow_word_death,if=natural_shadow_word_death_range,cycle_targets=1': Empty Expression after RegEx Replacements
            {spells.mindbender, 'player.hasTalent(3, 2)'}, -- mindbender,if=talent.mindbender.enabled
            {spells.shadowfiend, 'not player.hasTalent(3, 2)'}, -- shadowfiend,if=!talent.mindbender.enabled
            {spells.halo, 'player.hasTalent(6, 3) and target.distance <= 30 and target.distance >= 17'}, -- halo,if=talent.halo.enabled&target.distance<=30&target.distance>=17
            {spells.cascade, 'player.hasTalent(6, 1) and ( activeEnemies() > 1 or target.distance >= 28 ) and target.distance <= 40 and target.distance >= 11'}, -- cascade,if=talent.cascade.enabled&(active_enemies>1|target.distance>=28)&target.distance<=40&target.distance>=11
            {spells.divineStar, 'player.hasTalent(6, 2) and activeEnemies() > 3 and target.distance <= 24'}, -- divine_star,if=talent.divine_star.enabled&active_enemies>3&target.distance<=24
            {spells.shadowWordPain, 'target.myDebuffDuration(spells.shadowWordPain) < ( 18*0 . 3 ) and target.timeToDie > ( 18*0 . 75 ) and not target.hasMyDebuff(spells.shadowWordPain) and activeEnemies() <= 5'}, -- shadow_word_pain,if=remains<(18*0.3)&target.time_to_die>(18*0.75)&miss_react&!ticking&active_enemies<=5&primary_target=0,cycle_targets=1,max_cycle_targets=5
            {spells.vampiricTouch, 'target.myDebuffDuration(spells.vampiricTouch) < ( 15*0 . 3 + spells.vampiricTouch.castTime ) and target.timeToDie > ( 15*0 . 75 + spells.vampiricTouch.castTime ) and activeEnemies() <= 5'}, -- vampiric_touch,if=remains<(15*0.3+cast_time)&target.time_to_die>(15*0.75+cast_time)&miss_react&active_enemies<=5&primary_target=0,cycle_targets=1,max_cycle_targets=5
            {spells.divineStar, 'player.hasTalent(6, 2) and activeEnemies() == 3 and target.distance <= 24'}, -- divine_star,if=talent.divine_star.enabled&active_enemies=3&target.distance<=24
            {spells.mindSpike, 'activeEnemies() <= 4 and player.buffStacks(spells.surgeOfDarkness)'}, -- mind_spike,if=active_enemies<=4&buff.surge_of_darkness.react
            {spells.mindSear, 'activeEnemies() >= 8'}, -- mind_sear,if=active_enemies>=8,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1)
            {spells.mindSpike, 'target.myDebuffDuration(spells.devouringPlague) and target.myDebuffDuration(spells.devouringPlague) < spells.mindSpike.castTime'}, -- mind_spike,if=target.dot.devouring_plague_tick.remains&target.dot.devouring_plague_tick.remains<cast_time
            {spells.mindFlay, '(target.myDebuffDuration(spells.devouringPlague)/spells.devouringPlague.tickTime) > 1 and activeEnemies() > 1'}, -- mind_flay,if=target.dot.devouring_plague_tick.ticks_remain>1&active_enemies>1,chain=1,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1)
            {spells.mindSpike}, -- mind_spike
            {spells.shadowWordDeath, 'not target.hasMyDebuff(spells.shadowWordPain) and not target.hasMyDebuff(spells.vampiricTouch)'}, -- shadow_word_death,moving=1,if=!target.dot.shadow_word_pain.ticking&!target.dot.vampiric_touch.ticking,cycle_targets=1
            {spells.shadowWordDeath, 'player.isMoving == 1 * player.gcd'}, -- shadow_word_death,moving=1,if=movement.remains>=1*gcd
            {spells.powerWordShield, 'player.hasTalent(2, 1) and target.distance >= 25'}, -- power_word_shield,moving=1,if=talent.body_and_soul.enabled&movement.distance>=25
            {spells.halo, 'player.hasTalent(6, 3) and target.distance <= 30'}, -- halo,moving=1,if=talent.halo.enabled&target.distance<=30
            {spells.divineStar, 'player.hasTalent(6, 2) and target.distance <= 28 , player.isMoving'}, -- divine_star,if=talent.divine_star.enabled&target.distance<=28,moving=1
            {spells.cascade, 'player.hasTalent(6, 1) and target.distance <= 40 , player.isMoving'}, -- cascade,if=talent.cascade.enabled&target.distance<=40,moving=1
            {spells.devouringPlague}, -- devouring_plague,moving=1
        }},
        {{"nested"}, 'player.hasTalent(7, 1) and player.hasTalent(3, 3) and target.hp > 20 and activeEnemies() <= 6', { -- call_action_list,name=cop_dotweave,if=talent.clarity_of_power.enabled&talent.insanity.enabled&target.health.pct>20&active_enemies<=6
            {spells.devouringPlague, 'target.hasMyDebuff(spells.vampiricTouch) and target.hasMyDebuff(spells.shadowWordPain) and player.shadowOrbs == 5 and player.hasProc'}, -- devouring_plague,if=target.dot.vampiric_touch.ticking&target.dot.shadow_word_pain.ticking&shadow_orb=5&cooldown_react
            {spells.devouringPlague, 'player.buffDuration(spells.mentalInstinct) < player.gcd and player.buffDuration(spells.mentalInstinct) > ( player.gcd * 0.7 ) and player.buffDuration(spells.mentalInstinct)'}, -- devouring_plague,if=buff.mental_instinct.remains<gcd&buff.mental_instinct.remains>(gcd*0.7)&buff.mental_instinct.remains
            {spells.devouringPlague, '( target.hasMyDebuff(spells.vampiricTouch) and target.hasMyDebuff(spells.shadowWordPain) and not player.buffDuration(spells.insanity) and spells.mindBlast.cooldown > 0.4 * player.gcd )'}, -- devouring_plague,if=(target.dot.vampiric_touch.ticking&target.dot.shadow_word_pain.ticking&!buff.insanity.remains&cooldown.mind_blast.remains>0.4*gcd)
            {spells.shadowWordDeath, 'not target.hasMyDebuff(spells.shadowWordPain) and not target.hasMyDebuff(spells.vampiricTouch)'}, -- shadow_word_death,if=natural_shadow_word_death_range&!target.dot.shadow_word_pain.ticking&!target.dot.vampiric_touch.ticking,cycle_targets=1
-- SKIP 'shadow_word_death,if=natural_shadow_word_death_range,cycle_targets=1': Empty Expression after RegEx Replacements
-- SKIP 'mind_blast,if=glyph.mind_harvest.enabled&mind_harvest=0&shadow_orb<=2,cycle_targets=1': Line Skipped
            {spells.mindBlast, 'player.shadowOrbs <= 4 and player.hasProc'}, -- mind_blast,if=shadow_orb<=4&cooldown_react
            {spells.searingInsanity, 'player.buffDuration(spells.insanity) < 0.5 * player.gcd and activeEnemies() >= 3 and spells.mindBlast.cooldown > 0.5 * player.gcd'}, -- searing_insanity,if=buff.insanity.remains<0.5*gcd&active_enemies>=3&cooldown.mind_blast.remains>0.5*gcd,chain=1,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1)
            {spells.searingInsanity, 'activeEnemies() >= 3 and spells.mindBlast.cooldown > 0.5 * player.gcd'}, -- searing_insanity,if=active_enemies>=3&cooldown.mind_blast.remains>0.5*gcd,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1)
            {spells.shadowfiend, 'not player.hasTalent(3, 2) and not player.buffDuration(spells.insanity)'}, -- shadowfiend,if=!talent.mindbender.enabled&!buff.insanity.remains
            {spells.mindbender, 'player.hasTalent(3, 2) and not player.buffDuration(spells.insanity)'}, -- mindbender,if=talent.mindbender.enabled&!buff.insanity.remains
            {spells.shadowWordPain, 'player.shadowOrbs == 4 and not target.hasMyDebuff(spells.shadowWordPain) and not target.hasMyDebuff(spells.devouringPlague) and spells.mindBlast.cooldown < player.gcd and spells.mindBlast.cooldown > 0'}, -- shadow_word_pain,if=shadow_orb=4&set_bonus.tier17_2pc&!target.dot.shadow_word_pain.ticking&!target.dot.devouring_plague.ticking&cooldown.mind_blast.remains<gcd&cooldown.mind_blast.remains>0
            {spells.shadowWordPain, 'player.shadowOrbs == 5 and not target.hasMyDebuff(spells.devouringPlague) and not target.hasMyDebuff(spells.shadowWordPain)'}, -- shadow_word_pain,if=shadow_orb=5&!target.dot.devouring_plague.ticking&!target.dot.shadow_word_pain.ticking
            {spells.vampiricTouch, 'player.shadowOrbs == 5 and not target.hasMyDebuff(spells.devouringPlague) and not target.hasMyDebuff(spells.vampiricTouch)'}, -- vampiric_touch,if=shadow_orb=5&!target.dot.devouring_plague.ticking&!target.dot.vampiric_touch.ticking
            {spells.insanity, 'player.buffDuration(spells.insanity)'}, -- insanity,if=buff.insanity.remains,chain=1,interrupt_if=cooldown.mind_blast.remains<=0.1
            {spells.shadowWordPain, 'player.shadowOrbs >= 2 and target.myDebuffDuration(spells.shadowWordPain) >= 6 and spells.mindBlast.cooldown > 0.5 * player.gcd and target.myDebuffDuration(spells.vampiricTouch) and player.bloodlust and not'}, -- shadow_word_pain,if=shadow_orb>=2&target.dot.shadow_word_pain.remains>=6&cooldown.mind_blast.remains>0.5*gcd&target.dot.vampiric_touch.remains&buff.bloodlust.up&!set_bonus.tier17_2pc
            {spells.vampiricTouch, 'player.shadowOrbs >= 2 and target.myDebuffDuration(spells.vampiricTouch) >= 5 and spells.mindBlast.cooldown > 0.5 * player.gcd and player.bloodlust and not'}, -- vampiric_touch,if=shadow_orb>=2&target.dot.vampiric_touch.remains>=5&cooldown.mind_blast.remains>0.5*gcd&buff.bloodlust.up&!set_bonus.tier17_2pc
            {spells.halo, 'spells.mindBlast.cooldown > 0.5 * player.gcd and player.hasTalent(6, 3) and target.distance <= 30 and target.distance >= 17'}, -- halo,if=cooldown.mind_blast.remains>0.5*gcd&talent.halo.enabled&target.distance<=30&target.distance>=17
            {spells.cascade, 'spells.mindBlast.cooldown > 0.5 * player.gcd and player.hasTalent(6, 1) and ( ( activeEnemies() > 1 or target.distance >= 28 ) and target.distance <= 40 and target.distance >= 11 )'}, -- cascade,if=cooldown.mind_blast.remains>0.5*gcd&talent.cascade.enabled&((active_enemies>1|target.distance>=28)&target.distance<=40&target.distance>=11)
            {spells.divineStar, 'player.hasTalent(6, 2) and spells.mindBlast.cooldown > 0.5 * player.gcd and activeEnemies() > 3 and target.distance <= 24'}, -- divine_star,if=talent.divine_star.enabled&cooldown.mind_blast.remains>0.5*gcd&active_enemies>3&target.distance<=24
            {spells.shadowWordPain, 'not target.hasMyDebuff(spells.shadowWordPain)'}, -- shadow_word_pain,if=primary_target=0&!ticking,cycle_targets=1,max_cycle_targets=5
            {spells.vampiricTouch, 'not target.hasMyDebuff(spells.vampiricTouch)'}, -- vampiric_touch,if=primary_target=0&!ticking,cycle_targets=1,max_cycle_targets=5
            {spells.divineStar, 'player.hasTalent(6, 2) and spells.mindBlast.cooldown > 0.5 * player.gcd and activeEnemies() == 3 and target.distance <= 24'}, -- divine_star,if=talent.divine_star.enabled&cooldown.mind_blast.remains>0.5*gcd&active_enemies=3&target.distance<=24
            {spells.shadowWordPain, '( not target.hasMyDebuff(spells.shadowWordPain) or target.myDebuffDuration(spells.shadowWordPain) <= 18*0 . 3 ) and target.timeToDie > ( 18*0 . 75 )'}, -- shadow_word_pain,if=primary_target=0&(!ticking|remains<=18*0.3)&target.time_to_die>(18*0.75),cycle_targets=1,max_cycle_targets=5
            {spells.vampiricTouch, '( not target.hasMyDebuff(spells.vampiricTouch) or target.myDebuffDuration(spells.vampiricTouch) <= 15*0 . 3 + spells.vampiricTouch.castTime ) and target.timeToDie > ( 15*0 . 75 + spells.vampiricTouch.castTime )'}, -- vampiric_touch,if=primary_target=0&(!ticking|remains<=15*0.3+cast_time)&target.time_to_die>(15*0.75+cast_time),cycle_targets=1,max_cycle_targets=5
            {spells.mindSear, 'activeEnemies() >= 8'}, -- mind_sear,if=active_enemies>=8,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1)
            {spells.mindSpike}, -- mind_spike
            {spells.shadowWordDeath, 'not target.hasMyDebuff(spells.shadowWordPain) and not target.hasMyDebuff(spells.vampiricTouch)'}, -- shadow_word_death,moving=1,if=!target.dot.shadow_word_pain.ticking&!target.dot.vampiric_touch.ticking,cycle_targets=1
            {spells.shadowWordDeath, 'player.isMoving == 1 * player.gcd'}, -- shadow_word_death,moving=1,if=movement.remains>=1*gcd
            {spells.powerWordShield, 'player.hasTalent(2, 1) and target.distance >= 25'}, -- power_word_shield,moving=1,if=talent.body_and_soul.enabled&movement.distance>=25
            {spells.halo, 'player.hasTalent(6, 3) and target.distance <= 30 , player.isMoving'}, -- halo,if=talent.halo.enabled&target.distance<=30,moving=1
            {spells.divineStar, 'player.hasTalent(6, 2) and target.distance <= 28 , player.isMoving'}, -- divine_star,if=talent.divine_star.enabled&target.distance<=28,moving=1
            {spells.cascade, 'player.hasTalent(6, 1) and target.distance <= 40 , player.isMoving'}, -- cascade,if=talent.cascade.enabled&target.distance<=40,moving=1
            {spells.devouringPlague}, -- devouring_plague,moving=1
            {spells.shadowWordPain, ', player.isMoving'}, -- shadow_word_pain,if=primary_target=0,moving=1,cycle_targets=1
        }},
        {{"nested"}, 'player.hasTalent(7, 1) and player.hasTalent(3, 3)', { -- call_action_list,name=cop_insanity,if=talent.clarity_of_power.enabled&talent.insanity.enabled
            {spells.devouringPlague, 'player.shadowOrbs == 5 or ( activeEnemies() >= 5 and not player.buffDuration(spells.insanity) )'}, -- devouring_plague,if=shadow_orb=5|(active_enemies>=5&!buff.insanity.remains)
            {spells.devouringPlague, 'player.buffDuration(spells.mentalInstinct) < ( player.gcd * 1.7 ) and player.buffDuration(spells.mentalInstinct) > ( player.gcd * 0.7 ) and player.buffDuration(spells.mentalInstinct)'}, -- devouring_plague,if=buff.mental_instinct.remains<(gcd*1.7)&buff.mental_instinct.remains>(gcd*0.7)&buff.mental_instinct.remains
-- SKIP 'mind_blast,if=glyph.mind_harvest.enabled&mind_harvest=0,cycle_targets=1': Line Skipped
            {spells.mindBlast, 'activeEnemies() <= 5 and player.hasProc'}, -- mind_blast,if=active_enemies<=5&cooldown_react
            {spells.shadowWordDeath, 'not target.hasMyDebuff(spells.shadowWordPain) and not target.hasMyDebuff(spells.vampiricTouch)'}, -- shadow_word_death,if=natural_shadow_word_death_range&!target.dot.shadow_word_pain.ticking&!target.dot.vampiric_touch.ticking,cycle_targets=1
-- SKIP 'shadow_word_death,if=natural_shadow_word_death_range,cycle_targets=1': Empty Expression after RegEx Replacements
            {spells.devouringPlague, 'player.shadowOrbs >= 3 and not and not and ( spells.mindBlast.cooldown < player.gcd or ( spells.shadowWordDeath.cooldown < player.gcd ) )'}, -- devouring_plague,if=shadow_orb>=3&!set_bonus.tier17_2pc&!set_bonus.tier17_4pc&(cooldown.mind_blast.remains<gcd|(natural_shadow_word_death_range&cooldown.shadow_word_death.remains<gcd)),cycle_targets=1
            {spells.devouringPlague, 'player.shadowOrbs >= 3 and not and ( spells.mindBlast.cooldown <= 2 or ( spells.shadowWordDeath.cooldown < player.gcd ) )'}, -- devouring_plague,if=shadow_orb>=3&set_bonus.tier17_2pc&!set_bonus.tier17_4pc&(cooldown.mind_blast.remains<=2|(natural_shadow_word_death_range&cooldown.shadow_word_death.remains<gcd)),cycle_targets=1
            {spells.searingInsanity, 'player.buffDuration(spells.insanity) < 0.5 * player.gcd and activeEnemies() >= 3 and spells.mindBlast.cooldown > 0.5 * player.gcd'}, -- searing_insanity,if=buff.insanity.remains<0.5*gcd&active_enemies>=3&cooldown.mind_blast.remains>0.5*gcd,chain=1,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1)
            {spells.searingInsanity, 'activeEnemies() >= 5'}, -- searing_insanity,if=active_enemies>=5,chain=1,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1)
            {spells.mindbender, 'player.hasTalent(3, 2)'}, -- mindbender,if=talent.mindbender.enabled
            {spells.shadowfiend, 'not player.hasTalent(3, 2)'}, -- shadowfiend,if=!talent.mindbender.enabled
            {spells.shadowWordPain, 'target.myDebuffDuration(spells.shadowWordPain) < ( 18*0 . 3 ) and target.timeToDie > ( 18*0 . 75 ) and activeEnemies() <= 5'}, -- shadow_word_pain,if=remains<(18*0.3)&target.time_to_die>(18*0.75)&miss_react&active_enemies<=5&primary_target=0,cycle_targets=1,max_cycle_targets=5
            {spells.vampiricTouch, 'target.myDebuffDuration(spells.vampiricTouch) < ( 15*0 . 3 + spells.vampiricTouch.castTime ) and target.timeToDie > ( 15*0 . 75 + spells.vampiricTouch.castTime ) and activeEnemies() <= 5'}, -- vampiric_touch,if=remains<(15*0.3+cast_time)&target.time_to_die>(15*0.75+cast_time)&miss_react&active_enemies<=5&primary_target=0,cycle_targets=1,max_cycle_targets=5
            {spells.insanity, 'player.buffDuration(spells.insanity) < 0.5 * player.gcd and activeEnemies() <= 2'}, -- insanity,if=buff.insanity.remains<0.5*gcd&active_enemies<=2,chain=1,interrupt_if=(cooldown.mind_blast.remains<=0.1|(cooldown.shadow_word_death.remains<=0.1&target.health.pct<20))
            {spells.insanity, 'activeEnemies() <= 2'}, -- insanity,if=active_enemies<=2,chain=1,interrupt_if=(cooldown.mind_blast.remains<=0.1|(cooldown.shadow_word_death.remains<=0.1&target.health.pct<20))
            {spells.halo, 'player.hasTalent(6, 3) and target.distance <= 30 and target.distance >= 17'}, -- halo,if=talent.halo.enabled&target.distance<=30&target.distance>=17
            {spells.cascade, 'player.hasTalent(6, 1) and ( ( activeEnemies() > 1 or target.distance >= 28 ) and target.distance <= 40 and target.distance >= 11 )'}, -- cascade,if=talent.cascade.enabled&((active_enemies>1|target.distance>=28)&target.distance<=40&target.distance>=11)
            {spells.divineStar, 'player.hasTalent(6, 2) and activeEnemies() > 2 and target.distance <= 24'}, -- divine_star,if=talent.divine_star.enabled&active_enemies>2&target.distance<=24
            {spells.mindSear, 'activeEnemies() >= 8'}, -- mind_sear,if=active_enemies>=8,interrupt_if=(cooldown.mind_blast.remains<=0.1|cooldown.shadow_word_death.remains<=0.1)
            {spells.mindSpike}, -- mind_spike
            {spells.shadowWordDeath, 'not target.hasMyDebuff(spells.shadowWordPain) and not target.hasMyDebuff(spells.vampiricTouch)'}, -- shadow_word_death,moving=1,if=!target.dot.shadow_word_pain.ticking&!target.dot.vampiric_touch.ticking,cycle_targets=1
            {spells.shadowWordDeath, 'player.isMoving == 1 * player.gcd'}, -- shadow_word_death,moving=1,if=movement.remains>=1*gcd
            {spells.powerWordShield, 'player.hasTalent(2, 1) and target.distance >= 25'}, -- power_word_shield,moving=1,if=talent.body_and_soul.enabled&movement.distance>=25
            {spells.halo, 'player.hasTalent(6, 3) and target.distance <= 30 , player.isMoving'}, -- halo,if=talent.halo.enabled&target.distance<=30,moving=1
            {spells.divineStar, 'player.hasTalent(6, 2) and target.distance <= 28 , player.isMoving'}, -- divine_star,if=talent.divine_star.enabled&target.distance<=28,moving=1
            {spells.cascade, 'player.hasTalent(6, 1) and target.distance <= 40 , player.isMoving'}, -- cascade,if=talent.cascade.enabled&target.distance<=40,moving=1
            {spells.devouringPlague}, -- devouring_plague,moving=1
            {spells.shadowWordPain, ', player.isMoving'}, -- shadow_word_pain,if=primary_target=0,moving=1,cycle_targets=1
        }},
    }},
}
,"priest_shadow.simc")
